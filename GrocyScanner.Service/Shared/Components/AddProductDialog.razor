@using GrocyScanner.Core.Models
@using GrocyScanner.Core.GrocyClient
@using GrocyScanner.Core.Providers
@using GrocyScanner.Core.ValueCalculator
@using Humanizer
@inject IEnumerable<IProductProvider> ProductProviders
@inject IGrocyClient GrocyClient
@inject IBestValueCalculator BestValueCalculator
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        @if (Product != null)
        {
            <MudCard Outlined="true" Class="d-sm-flex flex-sm-start flex-sm-wrap d-lg-block">
                <MudCardContent>
                    @if (!string.IsNullOrEmpty(Product.ImageUrl))
                    {
                        <MudCardMedia Class="rounded" Image=@Product.ImageUrl Height="150"/>
                    }
                    <MudText Typo="Typo.h5" Class="fw-bold">@Product.Gtin</MudText>
                    <MudText Typo="Typo.h4" Class="fw-bold">@Product.Name.Humanize()</MudText>
                </MudCardContent>
                <MudStack Spacing="0" Class="m-3">
                    <MudDatePicker
                        Variant="Variant.Filled"
                        Label="Best before (optional)"
                        @bind-Date="FormBestBefore"
                        Margin="Margin.Dense"
                        MinDate="DateTime.Today"
                        DateFormat="dd.MM.yyyy"/>
                    <MudNumericField
                        @bind-Value="FormPrice"
                        Format="N2"
                        Label="Price"
                        Margin="Margin.Dense"
                        Variant="Variant.Filled"
                        Min="0.0"
                        Max="int.MaxValue"
                        />
                    <MudNumericField
                        @bind-Value="FormAmount"
                        Format="N0"
                        Label="Amount"
                        Margin="Margin.Dense"
                        Variant="Variant.Filled"
                        Min="1"
                        Max="999"
                    />
                    </MudStack>
            </MudCard>

        }
        @if (IsLoading)
        {
            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="150px" Class="mb-3"/>
            <MudSkeleton/>
            <MudSkeleton/>
        }
        @if (!IsLoading && Product == null)
        {
            <MudCard Outlined="true">
                <MudCardContent>
                    <MudImage Src="/undraw_taken_re_yn20.svg" Width="200" Height="200" Class="mx-auto d-block mb-4"></MudImage>
                    <MudText Typo="Typo.h4" Class="fw-bold text-center">Unable to find Product</MudText>
                    <MudText Class="text-center">Sorry, I was unable to find a matching product.</MudText>
                </MudCardContent>
            </MudCard>
        }
        <MudText>Requested at @ProductProviders.Count() providers</MudText>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton
            OnClick="OnClickPurchase"
            Variant="Variant.Filled"
            Color="Color.Primary"
            Disabled="IsLoading || Product == null">
            Purchase
        </MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter]
    public required MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public required string Barcode { get; set; }

    // state management
    private bool IsLoading { get; set; }

    // data management
    private Product? Product { get; set; }

    // form
    private DateTime? FormBestBefore { get; set; }
    private double FormPrice { get; set; }
    private int FormAmount { get; set; } = 1;

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        
        Product? productFromGrocy = await GrocyClient.GetProductByBarcode(Barcode);

        // product is not known, must be searched in the providers
        if (productFromGrocy == null)
        {
            Product?[] products = await Task.WhenAll(ProductProviders.Select(async provider => await provider.GetProductByGtin(Barcode)));
            Product = BestValueCalculator.GetProductWithMostValue(products.Where(product => product != null).Cast<Product>().ToList());
        }
        else
        {
            // product is known and can be fetched from Grocy
            Product = productFromGrocy;
        }

        IsLoading = false;
    }

    private async Task OnClickPurchase()
    {
        if (Product == null)
        {
            return;
        }

        DateOnly? bestBeforeDate = FormBestBefore.HasValue ? DateOnly.FromDateTime(FormBestBefore.Value) : null;
        await GrocyClient.UpsertProduct(Product, FormAmount, bestBeforeDate, FormPrice);
        Snackbar.Add($"Added \"{Product.Name}\" to Grocy", Severity.Success);
        MudDialog.Close(DialogResult.Ok(true));
    }

}