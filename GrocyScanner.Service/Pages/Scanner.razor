@page "/Scanner"
@using GrocyScanner.Core.Models
@using GrocyScanner.Core.Validators
@using GrocyScanner.Service.Request
@using GrocyScanner.Service.Shared.Components
@inject IGtinValidator GtinValidator
@using Microsoft.AspNetCore.SignalR.Client
@using GrocyScanner.Core.GrocyClient
@inject NavigationManager NavigationManager
@inject IJSRuntime Js
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IGrocyClient GrocyClient
@inject IProductStock ProductStock

<PageTitle>Scanner â€¢ Grocy Scanner</PageTitle>

<div class="d-flex flex-column gap-2 h-100">
    <MudStack>
        <MudToggleGroup
            T="ScannerMode"
            SelectionMode="SelectionMode.SingleSelection"
            @bind-Value="ScannerMode"
            Color="Color.Primary"
            CheckMark
            FixedContent
            @onclick="() => barcodeInputTextRef.FocusAsync()">
            <MudToggleItem SelectedIcon="@Icons.Material.Filled.ShoppingCart" Value="@ScannerMode.Purchase" Text="Purchase"/>
            <MudToggleItem SelectedIcon="@Icons.Material.Filled.Restaurant" Value="@ScannerMode.Consume" Text="Consume"/>
            <MudToggleItem SelectedIcon="@Icons.Material.Filled.AutoDelete" Value="@ScannerMode.ConsumeSpoiled" Text="Consume (spoiled)"/>
        </MudToggleGroup>
    </MudStack>
    <div>
        <MudTextField
            @ref="barcodeInputTextRef"
            @bind-Value="Barcode"
            T="string"
            Margin="Margin.Dense"
            Label="GTIN Barcode"
            Variant="Variant.Filled"
            Required="true"
            RequiredError="'Barcode is required'"
            TextChanged="OnInternalValueChanged"
            AutoFocus="true">
        </MudTextField>
    </div>

    <div class="bg-dark rounded overflow-hidden flex-grow-1 w-100" id="reader" style="height: 400px;">
        <div class="position-absolute top-50 start-50 translate-middle d-flex flex-column align-items-center">
            <img class="mb-5" width="120" height="auto" src="undraw_gone_shopping_re_2lau.svg" alt="shopping image"/>
            <h4>Ready to scan</h4>
            <span class="text-center">You can manually enter a EAN code at the top, connect a USB / Bluetooth barcode scanner or scan for a connected camera.</span>
        </div>
    </div>

    <div class="d-flex gap-2">
        <MudSelect
            ValueChanged="OnSelectedCameraChanged"
            Margin="Margin.Dense"
            T="CameraNotification"
            Label="Available Cameras"
            AnchorOrigin="Origin.BottomCenter"
            Variant="Variant.Filled">
            @foreach (CameraNotification camera in AvailableCameras)
            {
                <MudSelectItem
                    Value="@camera">
                    @camera.Label
                </MudSelectItem>
            }
        </MudSelect>
        <MudButton
            OnClick="OnRefreshAvailableCameras"
            Variant="Variant.Filled"
            Color="Color.Primary"
            Class="my-1">
            Look for cameras
        </MudButton>
    </div>
</div>


<FullScreenToggle/>

@code {
    private ScannerMode ScannerMode { get; set; } = ScannerMode.Purchase;
    private ICollection<CameraNotification> AvailableCameras { get; set; } = new List<CameraNotification>();
    private CameraNotification? CurrentSelectedCamera { get; set; }
    private string Barcode { get; set; } = string.Empty;

    private MudTextField<string> barcodeInputTextRef;

    protected override async Task OnInitializedAsync()
    {
        HubConnection hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/hubs/barcode"))
            .Build();

        hubConnection.On<string>("BarcodeScanned", async barcode =>
        {
            await InvokeAsync(async () => await OpenPurchaseDialogAsync(barcode));
            await InvokeAsync(StateHasChanged);
        });

        hubConnection.On<IEnumerable<CameraNotification>>("CamerasUpdated", async cameras =>
        {
            AvailableCameras = cameras.ToList();
            await InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task OnRefreshAvailableCameras()
    {
        await Js.InvokeVoidAsync("updateAvailableCameras");
    }

    private async Task OnSelectedCameraChanged(CameraNotification cameraNotification)
    {
        await Js.InvokeVoidAsync("startScanningWithCamera", cameraNotification.Id);
        CurrentSelectedCamera = cameraNotification;
    }

    private async Task OnInternalValueChanged()
    {
        if (string.IsNullOrEmpty(Barcode ) || !GtinValidator.Validate(Barcode))
        {
            return;
        }

        switch (ScannerMode)
        {
            case ScannerMode.Purchase:
                await OpenPurchaseDialogAsync(Barcode);
                break;
            case ScannerMode.Consume:
            case ScannerMode.ConsumeSpoiled:
                int? productId = await GrocyClient.GetProductIdByBarcode(Barcode);

                if (!productId.HasValue)
                {
                    Snackbar.Add("Product not in Grocy", Severity.Error);
                    await barcodeInputTextRef.FocusAsync();
                    return;
                }

                GrocyErrorMessage? grocyErrorMessage = await ProductStock.ConsumeProductAsync(productId.Value, 1, ScannerMode == ScannerMode.ConsumeSpoiled);
                if (grocyErrorMessage == null)
                {
                    Snackbar.Add("Consumed one stock item");
                }
                else
                {
                    Snackbar.Add(grocyErrorMessage.ErrorMessage, Severity.Error);
                }
                await barcodeInputTextRef.FocusAsync();
                Barcode = string.Empty;
                await barcodeInputTextRef.Clear();
                break;
            default:
                Snackbar.Add("Unable to process scan mode", Severity.Error);
                Barcode = string.Empty;
                break;
        }
    }

    private async Task OpenPurchaseDialogAsync(string barcode)
    {
        DialogParameters<AddProductDialog> parameters = new() { { nameof(AddProductDialog.Barcode), barcode } };
        Barcode = string.Empty;
        IDialogReference dialogReference = await DialogService.ShowAsync<AddProductDialog>("Purchase Product", parameters, new DialogOptions
        {
            CloseOnEscapeKey = false,
            DisableBackdropClick = true,
            CloseButton = false
        });
        await dialogReference.Result;
        await barcodeInputTextRef.FocusAsync();
    }

}